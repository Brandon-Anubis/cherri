/*
Media Actions
*/

/* Stores */

#define action searchAppStore(text query: 'WFSearchTerm')

#define action 'showinstore' showIniTunes(variable product: 'WFProduct')

/* Audio */

enum audioQuality {
	'Normal',
	'Very High',
}

enum audioStart {
	'On Tap',
	'Immediately',
}

enum audioFormats {
	'M4A',
	'AIFF',
}

enum audioSpeeds {
	'0.5X',
	'Normal',
	'2X',
}

#define action recordAudio(audioQuality ?quality: 'WFRecordingCompression' = "Normal", audioStart ?start: 'WFRecordingStart' = "On Tap")

#define action 'encodemedia' encodeAudio(
    variable audio: 'WFMedia',
    audioFormats ?format: 'WFMediaAudioFormat' = "M4A",
    audioSpeeds ?speed: 'WFMediaCustomSpeed' = "Normal"
) {
	"WFMediaAudioOnly": true
}

#define action playSound(variable input: 'WFInput')

/* Shazam */

#define action 'shazamMedia' startShazam(bool ?show: 'WFShazamMediaActionShowWhenRun' = true, bool ?showError: 'WFShazamMediaActionErrorIfNotRecognized' = true)

enum shazamDetail {
	'Apple Music ID',
	'Artist',
	'Title',
	'Is Explicit',
	'Lyrics Snippet',
	'Lyric Snippet Synced',
	'Artwork',
	'Video URL',
	'Shazam URL',
	'Apple Music URL',
	'Name',
}

#define action 'properties.shazam' getShazamDetail(variable input: 'WFInput', shazamDetail detail: 'WFContentItemPropertyName')

/* Camera */

#define action takePhoto(number count: 'WFPhotoCount' = 1, bool showPreview: 'WFCameraCaptureShowPreview' = true)

enum cameraOrientation {
	'Front',
	'Back',
}

enum videoQuality {
	'Low',
	'Medium',
	'High',
}

enum recordingStart {
	'On Tap',
	'Immediately',
}

#define action takeVideo(
    cameraOrientation ?camera: 'WFCameraCaptureDevice' = "Front",
    videoQuality ?quality: 'WFCameraCaptureQuality' = "High",
    recordingStart ?recordingStart: 'WFRecordingStart' = "Immediately"
)

/* Screenshots */

#define action takeScreenshot(bool ?mainMonitorOnly: 'WFTakeScreenshotMainMonitorOnly' = false) {
	"WFTakeScreenshotScreenshotType": "Full Screen"
}

/* Podcasts */

enum podcastDetail {
	'Feed URL',
	'Genre',
	'Episode Count',
	'Artist',
	'Store ID',
	'Store URL',
	'Artwork',
	'Artwork URL',
	'Name',
}

#define action searchPodcasts(text query: 'WFSearchTerm')

#define action 'properties.podcastshow' getPodcastDetail(variable podcast: 'WFInput', podcastDetail detail: 'WFContentItemPropertyName')

#define action 'getpodcastsfromlibrary' getPodcasts()

#define action playPodcast(variable podcast: 'WFPodcastShow')

/* Video Editing */

#define action 'encodemedia' stripMediaMetadata(variable media: 'WFMedia') {
	"Metadata": true
}

#define action 'encodemedia' setMetadata(
    variable media: 'WFMedia',
    variable ?artwork: 'WFMetadataArtwork',
    text ?title: 'WFMetadataTitle',
    text ?artist: 'WFMetadataArtist',
    text ?album: 'WFMetadataAlbum',
    text ?genre: 'WFMetadataGenre',
    text ?year: 'WFMetadataYear'
) {
	"Metadata": true
}

enum encodeVideoSizes {
	'640×480',
	'960×540',
	'1280×720',
	'1920×1080',
	'3840×2160',
	'HEVC 1920×1080',
	'HEVC 3840x2160',
	'ProRes 422',
}

enum encodeVideoSpeeds {
	'0.5X',
	'Normal',
	'2X',
}

#define action 'encodemedia' encodeVideo(variable video: 'WFMedia', encodeVideoSizes ?size: 'WFMediaSize' = "Passthrough", encodeVideoSpeeds ?speed: 'WFMediaCustomSpeed' = "Normal", bool ?preserveTransparency: 'WFMediaPreserveTransparency' = false)

#define action trimVideo(variable video: 'WFInputMedia')
