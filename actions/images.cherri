/*
Images Actions
*/

/* Image Editing */

enum imageCombineMode {
    'Vertically',
    'In a Grid'
}

#define action combineImages(variable images: 'WFInput', imageCombineMode ?mode: 'WFImageCombineMode' = "Vertically", number ?spacing: 'WFImageCombineSpacing' = 1)

enum cropImagePosition {
	'Center',
	'Top Left',
	'Top Right',
	'Bottom Left',
	'Bottom Right',
	'Custom',
}

#define action 'image.crop' cropImage(variable image: 'WFInput', text ?width: 'WFImageCropWidth' = "100", text ?height: 'WFImageCropHeight' = "100", cropImagePosition ?position: 'WFImageCropPosition' = "Center", text ?customPositionX: 'WFImageCropX', text ?customPositionY: 'WFImageCropY')

enum flipImageDirection {
	'Horizontal',
	'Vertical',
}

#define action 'image.flip' flipImage(variable image: 'WFInput', flipImageDirection direction: 'WFImageFlipDirection')

enum maskImageType {
	'Rounded Rectangle',
	'Ellipse',
	'Icon',
}

#define action 'image.mask' maskImage(variable image: 'WFInput', maskImageType type: 'WFMaskType', text ?radius: 'WFMaskCornerRadius')

#define action 'image.mask' customImageMask(variable image: 'WFInput', variable customMaskImage: 'WFCustomMaskImage') {
	"WFMaskType": "Custom Image"
}

#define action 'overlayimageonimage' overlayImage(variable image: 'WFInput', variable overlayImage: 'WFImage') {
	"WFShouldShowImageEditor": true
}

enum customImageOverlayPosition {
	'Center',
	'Top Left',
	'Top Right',
	'Bottom Left',
	'Bottom Right',
	'Custom',
}

#define action 'overlayimageonimage' customImageOverlay(
    variable image: 'WFInput',
    variable overlayImage: 'WFImage',
    text ?width: 'WFImageWidth',
    text ?height: 'WFImageHeight',
    text ?rotation: 'WFRotation' = "0",
    text ?opacity: 'WFOverlayImageOpacity' = "100",
    customImageOverlayPosition ?position: 'WFImagePosition' = "Center",
    text ?customPositionX: 'WFImageX',
    text ?customPositionY: 'WFImageY'
) {
	"WFShouldShowImageEditor": false
}

#define action 'image.resize' resizeImage(variable image: 'WFImage', text width: 'WFImageResizeWidth', text ?height: 'WFImageResizeHeight')

#define action 'image.resize' resizeImageByPercent(variable image: 'WFImage', text percentage: 'WFImageResizePercentage') {
	"WFImageResizeKey": "Percentage"
}

#define action 'image.resize' resizeImageByLongestEdge(variable image: 'WFImage', text length: 'WFImageResizeLength') {
	"WFImageResizeKey": "Longest Edge"
}

#define action 'image.removebackground' removeBackground(variable image: 'WFInput', bool ?crop: 'WFCropToBounds' = false)

#define action 'image.rotate' rotateMedia(variable image: 'WFImage', text degrees: 'WFImageRotateAmount')

enum convertImageFormats {
	'TIFF',
	'GIF',
	'PNG',
	'BMP',
	'PDF',
	'HEIF',
}

#define action 'image.convert' convertImage(variable image: 'WFInput', convertImageFormats format: 'WFImageFormat', float ?quality: 'WFImageCompressionQuality', bool ?preserveMetadata: 'WFImagePreserveMetadata' = true)

#define action 'image.convert' convertToJPEG(variable image: 'WFInput', number ?compressionQuality: 'WFImageCompressionQuality', bool ?preserveMetadata: 'WFImagePreserveMetadata' = true) {
	"WFImageFormat": "JPEG"
}

#define action 'image.convert' stripImageMetadata(variable image: 'WFInput') {
	"WFImageFormat": "Match Input",
	"WFImagePreserveMetadata": false
}

enum imageDetail {
	'Album',
	'Width',
	'Height',
	'Date Taken',
	'Media Type',
	'Photo Type',
	'Is a Screenshot',
	'Is a Screen Recording',
	'Location',
	'Duration',
	'Frame Rate',
	'Orientation',
	'Camera Make',
	'Camera Model',
	'Metadata Dictionary',
	'Is Favorite',
	'File Size',
	'File Extension',
	'Creation Date',
	'File Path',
	'Last Modified Date',
	'Name',
}

#define action 'properties.images' getImageDetail(variable image: 'WFInput', imageDetail detail: 'WFContentItemPropertyName')

#define action makeImageFromRichText(variable pdf: 'WFInput', text width: 'WFWidth', text height: 'WFHeight')

#define action 'extracttextfromimage' extractImageText(variable image: 'WFImage')

#define action 'detect.images' getImages(variable input: 'WFInput')

/* GIFs */

#define action makeGIF(variable input: 'WFInput', text ?delay: 'WFMakeGIFActionDelayTime' = "0.3", number ?loops: 'WFMakeGIFActionLoopCount', text ?width: 'WFMakeGIFActionManualSizeWidth', text ?height: 'WFMakeGIFActionManualSizeHeight') {
	"WFMakeGIFActionAutoSize": true,
	"WFMakeGIFActionLoopEnabled": true
}

#define action 'addframetogif' addToGIF(text image: 'WFImage', text gif: 'WFInputGIF', text ?delay: 'WFGIFDelayTime' = "0.25", bool ?autoSize: 'WFGIFAutoSize' = true, text ?width: 'WFGIFManualSizeWidth', text ?height: 'WFGIFManualSizeHeight')

#define action makeVideoFromGIF(variable gif: 'WFInputGIF', number ?loops: 'WFMakeVideoFromGIFActionLoopCount' = 1)

#define action 'getframesfromimage' getImageFrames(variable image: 'WFImage')